/* tslint:disable */
/* eslint-disable */
/**
 * HR management Api
 * Ambulance HR management API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DepartmentDto
 */
export interface DepartmentDto {
    /**
     * 
     * @type {DepartmentEnum}
     * @memberof DepartmentDto
     */
    'department': DepartmentEnum;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const DepartmentEnum = {
    Gp: 'GP',
    Surgery: 'Surgery',
    Pediatrics: 'Pediatrics',
    Gynecology: 'Gynecology',
    Neurology: 'Neurology',
    Other: 'Other'
} as const;

export type DepartmentEnum = typeof DepartmentEnum[keyof typeof DepartmentEnum];


/**
 * 
 * @export
 * @interface LoginEntry
 */
export interface LoginEntry {
    /**
     * Email of the user
     * @type {string}
     * @memberof LoginEntry
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface PersonalDocument
 */
export interface PersonalDocument {
    /**
     * Unique identifier of the document
     * @type {string}
     * @memberof PersonalDocument
     */
    'id': string;
    /**
     * Name of the document
     * @type {string}
     * @memberof PersonalDocument
     */
    'name': string;
    /**
     * Content of the document
     * @type {string}
     * @memberof PersonalDocument
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface PersonalDocumentEntry
 */
export interface PersonalDocumentEntry {
    /**
     * Name of the document
     * @type {string}
     * @memberof PersonalDocumentEntry
     */
    'name': string;
    /**
     * Content of the document
     * @type {string}
     * @memberof PersonalDocumentEntry
     */
    'content': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleEnum = {
    Doctor: 'Doctor',
    Nurse: 'Nurse',
    Administrator: 'Administrator',
    Receptionist: 'Receptionist',
    Technician: 'Technician',
    Other: 'Other'
} as const;

export type RoleEnum = typeof RoleEnum[keyof typeof RoleEnum];


/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * Unique identifier of the user
     * @type {string}
     * @memberof UserDto
     */
    'id': string;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserDto
     */
    'name': string;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserDto
     */
    'role': RoleEnum;
    /**
     * Phone number of the user
     * @type {string}
     * @memberof UserDto
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email': string;
    /**
     * 
     * @type {DepartmentEnum}
     * @memberof UserDto
     */
    'department': DepartmentEnum;
    /**
     * 
     * @type {Array<PersonalDocument>}
     * @memberof UserDto
     */
    'personalDocument': Array<PersonalDocument>;
}


/**
 * 
 * @export
 * @interface UserEntry
 */
export interface UserEntry {
    /**
     * Name of the user
     * @type {string}
     * @memberof UserEntry
     */
    'name': string;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserEntry
     */
    'role': RoleEnum;
    /**
     * Phone number of the user
     * @type {string}
     * @memberof UserEntry
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntry
     */
    'email': string;
    /**
     * 
     * @type {DepartmentEnum}
     * @memberof UserEntry
     */
    'department': DepartmentEnum;
}


/**
 * 
 * @export
 * @interface UserList
 */
export interface UserList {
    /**
     * Unique identifier of the user
     * @type {string}
     * @memberof UserList
     */
    'id': string;
    /**
     * Name of the user
     * @type {string}
     * @memberof UserList
     */
    'name': string;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserList
     */
    'role': RoleEnum;
    /**
     * 
     * @type {DepartmentEnum}
     * @memberof UserList
     */
    'department': DepartmentEnum;
}



/**
 * HRManagementApi - axios parameter creator
 * @export
 */
export const HRManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create new user
         * @summary Create new user
         * @param {UserEntry} userEntry User object to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userEntry: UserEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userEntry' is not null or undefined
            assertParamExists('createUser', 'userEntry', userEntry)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete user by id
         * @summary Delete user by id
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user by id
         * @summary Get user by id
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user department
         * @summary Update user department
         * @param {string} userId pass the id of the particular user
         * @param {DepartmentDto} [departmentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDepartment: async (userId: string, departmentDto?: DepartmentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserDepartment', 'userId', userId)
            const localVarPath = `/user/{userId}/department`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(departmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HRManagementApi - functional programming interface
 * @export
 */
export const HRManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HRManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Create new user
         * @summary Create new user
         * @param {UserEntry} userEntry User object to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userEntry: UserEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete user by id
         * @summary Delete user by id
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user by id
         * @summary Get user by id
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserList>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update user department
         * @summary Update user department
         * @param {string} userId pass the id of the particular user
         * @param {DepartmentDto} [departmentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserDepartment(userId: string, departmentDto?: DepartmentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserDepartment(userId, departmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HRManagementApi - factory interface
 * @export
 */
export const HRManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HRManagementApiFp(configuration)
    return {
        /**
         * Create new user
         * @summary Create new user
         * @param {UserEntry} userEntry User object to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(userEntry: UserEntry, options?: any): AxiosPromise<UserList> {
            return localVarFp.createUser(userEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete user by id
         * @summary Delete user by id
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user by id
         * @summary Get user by id
         * @param {string} userId pass the id of the particular user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<UserList>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Update user department
         * @summary Update user department
         * @param {string} userId pass the id of the particular user
         * @param {DepartmentDto} [departmentDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDepartment(userId: string, departmentDto?: DepartmentDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUserDepartment(userId, departmentDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HRManagementApi - interface
 * @export
 * @interface HRManagementApi
 */
export interface HRManagementApiInterface {
    /**
     * Create new user
     * @summary Create new user
     * @param {UserEntry} userEntry User object to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApiInterface
     */
    createUser(userEntry: UserEntry, options?: AxiosRequestConfig): AxiosPromise<UserList>;

    /**
     * Delete user by id
     * @summary Delete user by id
     * @param {string} userId pass the id of the particular user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApiInterface
     */
    deleteUser(userId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get user by id
     * @summary Get user by id
     * @param {string} userId pass the id of the particular user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApiInterface
     */
    getUser(userId: string, options?: AxiosRequestConfig): AxiosPromise<UserDto>;

    /**
     * Get all users
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApiInterface
     */
    getUsers(options?: AxiosRequestConfig): AxiosPromise<Array<UserList>>;

    /**
     * Update user department
     * @summary Update user department
     * @param {string} userId pass the id of the particular user
     * @param {DepartmentDto} [departmentDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApiInterface
     */
    updateUserDepartment(userId: string, departmentDto?: DepartmentDto, options?: AxiosRequestConfig): AxiosPromise<UserDto>;

}

/**
 * HRManagementApi - object-oriented interface
 * @export
 * @class HRManagementApi
 * @extends {BaseAPI}
 */
export class HRManagementApi extends BaseAPI implements HRManagementApiInterface {
    /**
     * Create new user
     * @summary Create new user
     * @param {UserEntry} userEntry User object to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApi
     */
    public createUser(userEntry: UserEntry, options?: AxiosRequestConfig) {
        return HRManagementApiFp(this.configuration).createUser(userEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete user by id
     * @summary Delete user by id
     * @param {string} userId pass the id of the particular user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApi
     */
    public deleteUser(userId: string, options?: AxiosRequestConfig) {
        return HRManagementApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user by id
     * @summary Get user by id
     * @param {string} userId pass the id of the particular user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApi
     */
    public getUser(userId: string, options?: AxiosRequestConfig) {
        return HRManagementApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return HRManagementApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user department
     * @summary Update user department
     * @param {string} userId pass the id of the particular user
     * @param {DepartmentDto} [departmentDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HRManagementApi
     */
    public updateUserDepartment(userId: string, departmentDto?: DepartmentDto, options?: AxiosRequestConfig) {
        return HRManagementApiFp(this.configuration).updateUserDepartment(userId, departmentDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserManagementApi - axios parameter creator
 * @export
 */
export const UserManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add personal document to user
         * @summary Add personal document to user
         * @param {string} userId pass the id of the particular user
         * @param {PersonalDocumentEntry} [personalDocumentEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonalDocument: async (userId: string, personalDocumentEntry?: PersonalDocumentEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addPersonalDocument', 'userId', userId)
            const localVarPath = `/user/{userId}/personalDocument`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personalDocumentEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login user
         * @summary Login user
         * @param {LoginEntry} loginEntry User object to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (loginEntry: LoginEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginEntry' is not null or undefined
            assertParamExists('loginUser', 'loginEntry', loginEntry)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update personal document of user
         * @summary Update personal document of user
         * @param {string} userId pass the id of the particular user
         * @param {PersonalDocument} [personalDocument] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonalDocument: async (userId: string, personalDocument?: PersonalDocument, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updatePersonalDocument', 'userId', userId)
            const localVarPath = `/user/{userId}/personalDocument`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personalDocument, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementApi - functional programming interface
 * @export
 */
export const UserManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Add personal document to user
         * @summary Add personal document to user
         * @param {string} userId pass the id of the particular user
         * @param {PersonalDocumentEntry} [personalDocumentEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPersonalDocument(userId: string, personalDocumentEntry?: PersonalDocumentEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPersonalDocument(userId, personalDocumentEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login user
         * @summary Login user
         * @param {LoginEntry} loginEntry User object to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(loginEntry: LoginEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(loginEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update personal document of user
         * @summary Update personal document of user
         * @param {string} userId pass the id of the particular user
         * @param {PersonalDocument} [personalDocument] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersonalDocument(userId: string, personalDocument?: PersonalDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePersonalDocument(userId, personalDocument, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserManagementApi - factory interface
 * @export
 */
export const UserManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserManagementApiFp(configuration)
    return {
        /**
         * Add personal document to user
         * @summary Add personal document to user
         * @param {string} userId pass the id of the particular user
         * @param {PersonalDocumentEntry} [personalDocumentEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonalDocument(userId: string, personalDocumentEntry?: PersonalDocumentEntry, options?: any): AxiosPromise<PersonalDocument> {
            return localVarFp.addPersonalDocument(userId, personalDocumentEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Login user
         * @summary Login user
         * @param {LoginEntry} loginEntry User object to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(loginEntry: LoginEntry, options?: any): AxiosPromise<UserDto> {
            return localVarFp.loginUser(loginEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Update personal document of user
         * @summary Update personal document of user
         * @param {string} userId pass the id of the particular user
         * @param {PersonalDocument} [personalDocument] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonalDocument(userId: string, personalDocument?: PersonalDocument, options?: any): AxiosPromise<PersonalDocument> {
            return localVarFp.updatePersonalDocument(userId, personalDocument, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserManagementApi - interface
 * @export
 * @interface UserManagementApi
 */
export interface UserManagementApiInterface {
    /**
     * Add personal document to user
     * @summary Add personal document to user
     * @param {string} userId pass the id of the particular user
     * @param {PersonalDocumentEntry} [personalDocumentEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    addPersonalDocument(userId: string, personalDocumentEntry?: PersonalDocumentEntry, options?: AxiosRequestConfig): AxiosPromise<PersonalDocument>;

    /**
     * Login user
     * @summary Login user
     * @param {LoginEntry} loginEntry User object to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    loginUser(loginEntry: LoginEntry, options?: AxiosRequestConfig): AxiosPromise<UserDto>;

    /**
     * Update personal document of user
     * @summary Update personal document of user
     * @param {string} userId pass the id of the particular user
     * @param {PersonalDocument} [personalDocument] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApiInterface
     */
    updatePersonalDocument(userId: string, personalDocument?: PersonalDocument, options?: AxiosRequestConfig): AxiosPromise<PersonalDocument>;

}

/**
 * UserManagementApi - object-oriented interface
 * @export
 * @class UserManagementApi
 * @extends {BaseAPI}
 */
export class UserManagementApi extends BaseAPI implements UserManagementApiInterface {
    /**
     * Add personal document to user
     * @summary Add personal document to user
     * @param {string} userId pass the id of the particular user
     * @param {PersonalDocumentEntry} [personalDocumentEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public addPersonalDocument(userId: string, personalDocumentEntry?: PersonalDocumentEntry, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).addPersonalDocument(userId, personalDocumentEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login user
     * @summary Login user
     * @param {LoginEntry} loginEntry User object to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public loginUser(loginEntry: LoginEntry, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).loginUser(loginEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update personal document of user
     * @summary Update personal document of user
     * @param {string} userId pass the id of the particular user
     * @param {PersonalDocument} [personalDocument] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementApi
     */
    public updatePersonalDocument(userId: string, personalDocument?: PersonalDocument, options?: AxiosRequestConfig) {
        return UserManagementApiFp(this.configuration).updatePersonalDocument(userId, personalDocument, options).then((request) => request(this.axios, this.basePath));
    }
}


